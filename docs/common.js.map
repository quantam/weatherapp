{"version":3,"sources":["./src/app/providers/data.service.ts"],"names":[],"mappings":";;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACU;;;AAE5C,MAAM,MAAM,GAAG,kCAAkC,CAAC;AAClD,MAAM,OAAO,GAAG,wCAAwC,CAAC;AAKlD,MAAM,WAAW;IAEtB,YAA6B,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QADrC,YAAO,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IACd,CAAC;IAEjD,YAAY;QACV,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QAChC,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,GAAG,OAAO,aAAa,GAAG,UAAU,MAAM,eAAe,CAAC;aAC9D,IAAI,CACH,iEAAU,CAAC,CAAC,KAAwB,EAAE,EAAE;YACtC,OAAO,uDAAU,CACf,0BAA0B,KAAK,CAAC,UAAU,IAAI,SAAS,GAAG,CAC3D,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;IACN,CAAC;IAED,kBAAkB,CAAC,IAAY,EAAE,QAAgB;QAC/C,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CACF,GAAG,OAAO,eAAe,IAAI,uBAAuB,MAAM,eAAe,CAC1E;aACA,IAAI,CACH,iEAAU,CAAC,CAAC,KAAwB,EAAE,EAAE;YACtC,OAAO,uDAAU,CACf,0BAA0B,KAAK,CAAC,UAAU,IAAI,SAAS,GAAG,CAC3D,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;IACN,CAAC;;sEA7BU,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM","file":"common.js","sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nconst APIKEY = '3d8b309701a13f65b660fa2c64cdc517';\nconst BASEURL = 'http://api.openweathermap.org/data/2.5';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n  private cityIds = [2643743, 2950158, 524894, 745044, 3117735];\n  constructor(private readonly http: HttpClient) {}\n\n  getDataByIds() {\n    const ids = this.cityIds.join();\n    return this.http\n      .get(`${BASEURL}/group?id=${ids}&appid=${APIKEY}&units=metric`)\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          return throwError(\n            `Error retrieving data. ${error.statusText || 'Unknown'} `\n          );\n        })\n      );\n  }\n\n  getWeatherForeCast(city: string, noOfDays: number) {\n    return this.http\n      .get(\n        `${BASEURL}/forecast?q=${city}&units=metric&appid=${APIKEY}&units=metric`\n      )\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          return throwError(\n            `Error retrieving data. ${error.statusText || 'Unknown'} `\n          );\n        })\n      );\n  }\n}\n"],"sourceRoot":"webpack:///"}